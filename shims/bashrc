#!/bin/bash

##### PATH PRIORITY SETTINGS #####
#  4. Homebrew (sbin)
export PATH=/usr/local/sbin:$PATH
#  3. nodebrew
export PATH=$HOME/.nodebrew/current/bin:$PATH
#  2. golang
export PATH=/usr/local/go/bin:$PATH
#  1. rust
export PATH="$HOME/.cargo/bin:$PATH"
# SRILM
if [[ -e "$HOME/.srilm" ]]; then
	export PATH="${PATH}:${HOME}/.srilm/bin:${HOME}/.srilm/bin/macosx"
fi
# julius
if [[ -e "$HOME/.julius" ]]; then
	export PATH="${PATH}:${HOME}/.julius/dictation-kit-v4.4/bin/osx"
fi

##### ENV SETTINGS #####
# golang
# export GOROOT="/usr/local/go/bin"
# export GOPATH="${HOME}/.golang"

# ENV: Google Drive
export GOOGLE_DRIVE_ROOT="${HOME}/Google Drive"

# pyenv init 
if [[ -d "$HOME/.pyenv" ]]; then
	eval "$(pyenv init -)"
fi

# Alias: ls
if type "colorls" > /dev/null 2>&1; then
	alias ls-old='/bin/ls -a'
	alias ls='colorls -a'
	alias ll='colorls -al'
else
	alias ls='/bin/ls -a'
	alias ll='/bin/ls -al'
fi

# ALIAS: rsync (2.6.9 -> 3.1)
alias rsync='rsync3.1'

# ALIAS: vim
alias v='vim'

# ALIAS: git
alias g='git'

# ALIAS: docker
alias d='docker'
alias dc='docker-compose'

# ALIAS: ls | grep
alias lg='/bin/ls -a1 | grep'

# ALIAS: fzf-prev
alias fzf-prev="fzf --preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (highlight -O ansi {}) 2> /dev/null | head -500"
alias fv='fzf-prev'

# ALIAS: ghq
if type "ghq" > /dev/null 2>&1; then
	alias gg='ghq get'
	if type "fzf" > /dev/null 2>&1; then
		alias gcd='ghq look $(ghq list | fzf)'
		alias gls='ghq list | fzf'
	fi
fi

# ALIAS: man -> .pdf -> open Skim.App
# REF: https://sourceforge.net/p/skim-app/wiki/Tips_and_Tricks/
# alias manp='man -t \!* | ps2pdf - /tmp/man_\!$.pdf && open -a Skim /tmp/man_\!$.pdf'
function manp () {
	if [ $# -lt 1 ]; then
		echo "manp: invalid arguments !"
		echo "usage: manp [man-name]"
	else
		man -t $1 | ps2pdf - /tmp/man_$1.pdf && open -a Skim /tmp/man_$1.pdf
	fi
}

function mkTexDoc () {
	DIR_PATH="${GOOGLE_DRIVE_ROOT}/情報学部/NewTexReport"
	PATH_RESOURCE="${GOOGLE_DRIVE_ROOT}/情報学部/.tex_resource"

	if [[ -e $DIR_PATH ]]; then
		echo "${DIR_PATH}: already exists !"
		subl "${DIR_PATH}" 
	else
		mkdir -v -p "$DIR_PATH/img"
		cp -v "${PATH_RESOURCE}/Preamble.tex" "${PATH_RESOURCE}/Source.tex" "$DIR_PATH/" 
		subl "${DIR_PATH}"
	fi
}

function mkSemiReport() {
	DIR_ROOT="${GOOGLE_DRIVE_ROOT}/情報学部/研究/Semi_Report"
	PATH_RESOURCE="${GOOGLE_DRIVE_ROOT}/情報学部/.tex_resource"

	NUM_OF_REPORT=$(find ${DIR_ROOT} -maxdepth 1 -type d | grep -E '.*/#[0-9]+$' | sed -E 's%'"${DIR_ROOT}"'/#%%g' | sort -r | head -1)
	NUM_OF_REPORT=$(expr ${NUM_OF_REPORT} + 1)

	DIR_PATH="${DIR_ROOT}/#${NUM_OF_REPORT}"

	if [[ -e ${DIR_PATH} ]]; then
		echo "${DIR_PATH}: already exists !"
		subl "${DIR_PATH}"
	else
		mkdir -v -p "${DIR_PATH}/img"
		cp -v "${PATH_RESOURCE}/SemiReport.tex"  "${DIR_PATH}/SemiReport.tex" 
		sed -e 's#Source\.tex#SemiReport\.tex#g' "${PATH_RESOURCE}/Preamble.tex" > "${DIR_PATH}/Preamble.tex"
		subl "${DIR_PATH}"
	fi
}

function pdfFontEmbed() {
	if [ $# -lt 1 ]; then
		echo "pdfFontEmbed: invalid arguments !"
		echo "usage: pdfFontEmbed [pdf-file]"
	else
		OUT_NAME=$(echo -n $1 | sed -e 's#\.pdf#_embed.pdf#g')
		echo "$1  -->  Font Embed  -->  ${OUT_NAME}"
		gs -q -dNOPAUSE -dBATCH -dPDFSETTINGS=/prepress -sDEVICE=pdfwrite -sOutputFile=${OUT_NAME} $1
		pdffonts "${OUT_NAME}"
	fi
}

function pdfRemovePass() {
	if [[ $# != 2 ]]; then
		echo "usage: pdfRemovePass [in-file] [password]"
	else
		OUT_NAME=$(echo -n $1 | sed -e 's#\.pdf#_decrypted.pdf#g')
		gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sPDFPassword=$2 -sOutputFile="${OUT_NAME}" -c .setpdfwrite -f "$1"
	fi
}
# less with Syntax-Highlight, Line-Number
export LESSOPEN='| /usr/local/bin/src-hilite-lesspipe.sh %s'
export LESS='-gj10 --no-init --quit-if-one-screen --RAW-CONTROL-CHARS -N'

# Customize for Skim.app
function SkimEnableAutoSave(){
	defaults write -app Skim SKAutosaveInterval -float 15.0
	echo "Skim: Enabled Auto-Saving (Interval = 15.0 sec)"
}

function SkimDisableAutoSave(){
	defaults write -app Skim SKAutosaveInterval -float 0.0
	echo "Skim: Disabled Auto-Saving"
}


# File Encrypt & Decrypt 
function myFileEncrypt {
	if [ $# -ne 1 ] ;then
		echo "usage: myFileEncrypt [file-to-encrypt]"
	else
		openssl aes-256-cbc -e -in "$1" -out "$1.encrypted"
	fi
}

function myFileDecrypt {
	if [ $# -ne 1 ] ;then
		echo "usage: myFileDecrypt [file-to-decrypt]"
	else
		openssl aes-256-cbc -d -in "$1" -out "${1/.encrypted/}"
	fi
}

function colorTest {
	for i in {0..255} ; do
		printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
		if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
			printf "\n";
		fi
	done
}

