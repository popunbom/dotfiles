#!/bin/bash

# only bash
if [[ -n "$BASH_VERSION" ]]; then
	# Load: ~/.bashrc_orig
	if [[ -f "$HOME/.bashrc_orig" ]]; then
		source $HOME/.bashrc_orig
	fi
	# プロンプト設定
	export PS1="\[\033[38;5;13m\][\[\033(B\033[m\]\[\033[38;5;6m\]\l\[\033(B\033[m\]\[\033[38;5;13m\]]\[\033(B\033[m\]\[\033[38;5;15m\] \[\033(B\033[m\]\[\033[38;5;14m\]\u\[\033(B\033[m\]\[\033[38;5;7m\]@\[\033(B\033[m\]\[\033[38;5;10m\]\h\[\033(B\033[m\]\[\033[38;5;15m\] \[\033(B\033[m\]\[\033[38;5;7m\]\w\[\033(B\033[m\]\[\033[38;5;15m\]\n \[\033(B\033[m\]\[\033[38;5;13m\]\$\[\033(B\033[m\]\[\033[38;5;15m\] \[\033(B\033[m\]"	
fi

##### ENV #####

export EDITOR=vim
export VISUAL=vim

##### PATH PRIORITY SETTINGS #####
#  Homebrew (sbin)
export PATH="/usr/local/sbin:$PATH"
#  Linuxbrew
if [[ $(uname) == "Linux" ]]; then
	if [[ -d "/home/linuxbrew/.linuxbrew/bin" ]]; then
		export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH" 
	elif [[ -d "$HOME/.linuxbrew/bin" ]]; then
		export PATH="$HOME/.linuxbrew/bin:$PATH" 
	fi

	if type "brew" > /dev/null 2>&1; then
		eval $(brew shellenv)
	fi
fi
#  nodebrew
export PATH="$HOME/.nodebrew/current/bin:$PATH"
# yarn
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
#  golang
export PATH="$HOME/.golang/bin:/usr/local/opt/go/libexec/bin:$PATH"
#  rust
export PATH="$HOME/.cargo/bin:$PATH"

##### ENV SETTINGS #####
# golang
export GOPATH="${HOME}/.golang"

# java
if [[ $(uname) == "Darwin" ]]; then
	export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
fi

# ENV: Google Drive
export GOOGLE_DRIVE_ROOT="${HOME}/Google Drive"

# ENV: GUI Editor
export GUI_EDITOR="code"

# jenv
export PATH="$HOME/.jenv/bin:$PATH"
# XXenv init 
for XXenv in "pyenv" "rbenv" "nodenv" "jenv"; do
	if [[ -d "$HOME/.${XXenv}" ]]; then
		eval "$(${XXenv} init -)"
	fi
done


# ALIAS: pip
alias pip2='pip'
alias pip='pip3'

# ALIAS: ls
if type "lsd" > /dev/null 2>&1; then
	alias ls-old='/bin/ls -aG'
	alias ls='lsd -a'
	alias ll='lsd -al'
else
	alias ls='/bin/ls -Ga'
	alias ll='/bin/ls -Gal'
fi

# ALIAS: rsync (2.6.9 -> 3.1)
alias rsync='rsync3.1'

# ALIAS: vim
alias v='vim'

# ALIAS: git
alias g='git'

# ALIAS: tig
if type "tig" > /dev/null 2>&1; then
	alias t='tig --all'
fi

# ALIAS: ipython
alias ipy="ipython --profile=imgproc"

# ALIAS: Jupyter Notebook
alias jnb="jupyter notebook"

# ALIAS: docker
alias d='docker'
alias dc='docker-compose'

# ALIAS: ls | grep
alias lg='/bin/ls -a1 | grep'

# ALIAS: fzf-prev
alias fzf-prev="fzf --preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (highlight -O ansi {}) 2> /dev/null | head -500"
alias fv='fzf-prev'

# ALIAS: ghq
if type "ghq" > /dev/null 2>&1; then
	alias gg='ghq get'
	if type "fzf" > /dev/null 2>&1; then
		alias gcd='cd $(ghq root)/$(ghq list | fzf)'
		alias gls='ghq list | fzf'
	fi
fi

# ALIAS: .rc edit by VIM
alias bashrc="vim ~/.bashrc"
alias zshrc="vim ~/.zshrc"
alias vimrc="vim ~/.vimrc"
alias nvimrc="nvim ~/.config/nvim/init.vim"
alias gitconfig="vim ~/.gitconfig"

# ALIAS: .dotfiles Git Repository
alias dotfiles="cd ${HOME}/.dotfiles"

# ALIAS: PATH
alias PATH="echo $PATH | tr ':' '\n'"

# ALIAS: pkill
alias pkill="pkill -15"

# ALIAS: man -> .pdf -> open Skim.App
# REF: https://sourceforge.net/p/skim-app/wiki/Tips_and_Tricks/
# alias manp='man -t \!* | ps2pdf - /tmp/man_\!$.pdf && open -a Skim /tmp/man_\!$.pdf'
function manp () {
	if [ $# -lt 1 ]; then
		echo "manp: invalid arguments !"
		echo "usage: manp [man-name]"
	else
		man -t $1 | ps2pdf - /tmp/man_$1.pdf && open -a Skim /tmp/man_$1.pdf
	fi
}

function mkTexDoc () {
	DIR_NAME="${GOOGLE_DRIVE_ROOT}/情報学部/NewTexReport"
	PATH_RESOURCE="${GOOGLE_DRIVE_ROOT}/情報学部/.tex_resource"

	if [[ -e $DIR_NAME ]]; then
		echo "${DIR_NAME}: already exists !"
		${GUI_EDITOR} "${DIR_NAME}" 
	else
		mkdir -v -p "$DIR_NAME/img"
		cp -v "${PATH_RESOURCE}/Preamble.tex" "${PATH_RESOURCE}/Source.tex" "$DIR_NAME/" 
		${GUI_EDITOR} "${DIR_NAME}"
	fi
}

function mkSemiReport() {
	DIR_ROOT="${GOOGLE_DRIVE_ROOT}/情報学部/研究/Semi_Report"
	PATH_RESOURCE="${GOOGLE_DRIVE_ROOT}/情報学部/.tex_resource"

	NUM_OF_REPORT=$(find ${DIR_ROOT} -maxdepth 1 -type d | grep -E '.*/#[0-9]+$' | sed -E 's%'"${DIR_ROOT}"'/#%%g' | sort -r | head -1)
	# echo "NUM_OF_REPORT = ${NUM_OF_REPORT}"
	NUM_OF_REPORT=$(expr ${NUM_OF_REPORT} + 1)

	DIR_PATH="${DIR_ROOT}/#${NUM_OF_REPORT}"

	if [[ -e ${DIR_PATH} ]]; then
		echo "${DIR_PATH}: already exists !"
		${GUI_EDITOR} "${DIR_NAME}"
	else
		mkdir -v -p "${DIR_PATH}/img"
		cp -v "${PATH_RESOURCE}/Preamble.tex" "${PATH_RESOURCE}/SemiReport.tex" "${DIR_PATH}/" 
		${GUI_EDITOR} "${DIR_PATH}"
	fi
}

function pdfFontEmbed() {
	if [ $# -lt 1 ]; then
		echo "pdfFontEmbed: invalid arguments !"
		echo "usage: pdfFontEmbed [pdf-file]"
	else
		OUT_NAME=$(echo -n $1 | sed -e 's#\.pdf#_embed.pdf#g')
		echo "$1  -->  Font Embed  -->  ${OUT_NAME}"
		/usr/local/bin/gs -q -dNOPAUSE -dBATCH -dPDFSETTINGS=/prepress -sDEVICE=pdfwrite -sOutputFile=\"${OUT_NAME}\" \"$1\"
		pdffonts "${OUT_NAME}"
	fi
}

# less with Syntax-Highlight, Line-Number
export LESSOPEN='| /usr/local/bin/src-hilite-lesspipe.sh %s'
export LESS='-gj10 --no-init --quit-if-one-screen --RAW-CONTROL-CHARS -N'

# Customize for Skim.app
function SkimEnableAutoSave(){
	defaults write -app Skim SKAutosaveInterval -float 15.0
	echo "Skim: Enabled Auto-Saving (Interval = 15.0 sec)"
}

function SkimDisableAutoSave(){
	defaults write -app Skim SKAutosaveInterval -float 0.0
	echo "Skim: Disabled Auto-Saving"
}


# File Encrypt & Decrypt 
function myFileEncrypt {
	function show_usage () {
		cat <<- EOS

		usage: myFileEncrypt file-to-encrypt [-o out-file-name]
			- Encrypt file by openssl. 
			- Encrypted file applies suffix '.encrypted' unless '-o' option.

		EOS
	}

if [[ $# == 0 || $1 == '--help' || $1 == '-h' ]]; then
	show_usage
else
	IN_FILE=$1
	shift
	# Parse arguments
	for OPT in "$@"; do

		if [[ -n $OUT_FILE ]]; then
			echo "invalid arguments !"
			show_usage
			return -1
		fi

		case $OPT in
			'-o' )
				USE_CUSTOM_NAME=1
				;;
			* )
				if [[ ! $USE_CUSTOM_NAME ]]; then
					echo "invalid arguments !"
					show_usage
					return -1
				else
					OUT_FILE=$1
				fi
				;;
		esac
		shift
	done

	if [[ -z $OUT_FILE ]]; then
		echo "invalid arguments !: '-o' option requires 'out-file-name'"
		return -1
	fi


	if [[ $USE_CUSTOM_NAME ]]; then
		echo "Encrypt:  \"${IN_FILE}\"  -->  \"${OUT_FILE}\""
		openssl aes-256-cbc -e -in "${IN_FILE}" -out "${OUT_FILE}"
	else
		echo "Encrypt:  \"${IN_FILE}\"  -->  \"${IN_FILE}.encrypted\""
		openssl aes-256-cbc -e -in "${IN_FILE}" -out "${IN_FILE}.encrypted"
	fi
fi

}

function myFileDecrypt {
	function show_usage () {
		cat <<- EOS

		usage: myFileDecrypt encrypted-file [-o out-file-path]
			- Decrypt file by openssl. 
			- Decrypted file outputs to stdout unless '-o' option.

		EOS
	}

if [[ $# == 0 || $1 == '--help' || $1 == '-h' ]]; then
	show_usage
else
	IN_FILE=$1
	OUT_TO="stdout"
	shift
	# Parse arguments
	for OPT in "$@"; do

		if [[ -n $OUT_FILE ]]; then
			echo "invalid arguments !"
			show_usage
			return -1
		fi

		case $OPT in
			'-o' )
				OUT_TO="file"
				;;
			* )
				if [[ $OUT_TO != "file" ]]; then
					echo "invalid arguments !"
					show_usage
				else
					OUT_FILE=$1
				fi
				;;
		esac
		shift
	done

	if [[ $OUT_TO == "file" && -z $OUT_FILE ]]; then
		echo "invalid arguments !: '-o' option requires 'out-file-name'"
		return -1
	fi

	if [[ "$OUT_TO" == "stdout" ]]; then
		openssl aes-256-cbc -d -in "${IN_FILE}"
	elif [[ "$OUT_TO" == "file" ]]; then
		echo "Decrypted: ${IN_FILE}  -->  ${IN_FILE/.encrypted/}"
		openssl aes-256-cbc -d -in "${IN_FILE}" -out "${IN_FILE/.encrypted/}"
	fi

fi
}

function dockerToolboxInit {
	if [[ -d '/Applications/Docker/Docker Quickstart Terminal.app' ]]; then
		bash --login '/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh' 
	fi
}

function mov2gif {
	if type "ffmpeg" > /dev/null 2>&1; then
		if [[ $# != 1 || $1 == '--help' || $1 == '-h' ]]; then
			cat <<- EOS
			usage: mov2gif mov-file 
				- Convert .mov to GIF animation (fps = 15)
			EOS
		else
			if [[ -e $1 ]]; then
				ffmpeg -i "$1" -r 15 "${1/mov/gif}"
			else
				echo "Error! -- file not found: $1"
			fi
		fi
	else
		echo "Error! -- 'ffmpeg' not found"
	fi
}


